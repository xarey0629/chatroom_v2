# Basic type: String Int Float Boolean ID
# All argument will go downward to these leaves basic types.
# '!' -> non-nullable sign: must has content!

type Query {
  chatbox(name1: String!, name2: String!): ChatBox!
}

type ChatBox{
  name: String!
  messages: [Message!]! # Not a leaf. 
}

type Message{
  sender: String!
  body: String!
}

type Mutation{
  createChatBox(name1: String, name2: String): ChatBox!
  createMessage(name: String!, to: String!, body: String!): Message!
}

type Subscription{
  message(from: String!, to: String!): Message!
}

# type Query {
#   users(query: String, age: Int): [User!]! 
#   posts(query: String): [Post!]!
#   comments: [Comment!]!
#   me: User!
#   post: Post!
# }

# Self-defined data type e.g., CreateUserInput
# type Mutation {
#   createUser(data: CreateUserInput!): User!
#   deleteUser(id: ID!): User!
#   updateUser(id: ID!, data: UpdateUserInput!): User!
#   createPost(data: CreatePostInput!): Post!
#   deletePost(id: ID!): Post!
#   updatePost(id: ID!, data: UpdatePostInput!): Post!
#   createComment(data: CreateCommentInput!): Comment!
#   deleteComment(id: ID!): Comment!
#   updateComment(id: ID!, data: UpdateCommentInput!): Comment!
# }

# type Subscription {
#   comment(postId: ID!): CommentSubscriptionPayload!
#   post: PostSubscriptionPayload!
# }

# Input Argument specifications
input CreateUserInput {
  name: String!
  email: String!
  age: Int
}

input UpdateUserInput {
  name: String
  email: String
  age: Int
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  author: ID!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  author: ID!
  post: ID!
}

input UpdateCommentInput {
  text: String
}

# Backward data type specificatios
type User {
  id: ID!
  name: String!
  email: String!
  age: Int
  posts: [Post!]!
  comments: [Comment!]!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
}

# An enum specifies a set of Strings that you can use throughout your schema.
# When you define an Enum, you are basically defining a set of "fixed Strings".
enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type PostSubscriptionPayload {
  mutation: MutationType!
  data: Post!
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  data: Comment!
}
